version: "3.8"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
    networks:
      - frontend_backend
    env_file:
      - .env
    restart: always

  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_API_URL_SOCKET: ${VITE_API_URL_SOCKET}
        VITE_API_HOST: ${VITE_API_HOST}
    volumes:
      - ./Frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      CHOKIDAR_USEPOLLING: "true"
    networks:
      - frontend_backend
    restart: always

  nginx:
    build:
      context: ./Nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
      - grafana
      - prometheus
      - alertmanager
    networks:
      - frontend_backend
      - monitoring

  prometheus:
      build:
        context: ./monitoring/prometheus
        dockerfile: Dockerfile
      command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/usr/share/prometheus/console_libraries' #the web UI
        - '--web.console.templates=/usr/share/prometheus/consoles'
        - '--web.external-url=https://e3r10p2.1337.ma/prometheus' #for  Nginx sub-path
      networks:
        - monitoring
        - frontend_backend
      restart: always

  grafana:
    build:
      context: ./monitoring/grafana
      dockerfile: Dockerfile
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=https://e3r10p2.1337.ma/grafana # Tells Grafana what the external public URL is (important when itâ€™s behind a reverse proxy like Nginx or Traefik)
      - GF_SERVER_SERVE_FROM_SUB_PATH=true # Must be true if Grafana is served from a subpath (like /grafana instead of /)
    env_file:
      - .env
    networks:
      - monitoring

  alertmanager:
    build:
      context: ./monitoring/Alertmanager
      dockerfile: Dockerfile
    volumes:
      - alertmanager_data:/alertmanager
    environment:
      - EXTERNAL_URL=https://e3r10p2.1337.ma/alertmanager
    env_file:
      - .env
    networks:
      - monitoring
      - frontend_backend

  nginx_exporter:
    build:
      context: ./monitoring/nginx_exporter
      dockerfile: Dockerfile
    depends_on:
      - nginx
    ports:
      - "9113:9113"
    networks:
      - monitoring
      - frontend_backend

  node_exporter:
    build:
      context: ./monitoring/node_exporter
      dockerfile: Dockerfile
    ports:
      - "9100:9100"
    networks:
      - monitoring




networks:
  monitoring:
  frontend_backend:

volumes:
  backend_node_modules:
  frontend_node_modules:
  alertmanager_data:
